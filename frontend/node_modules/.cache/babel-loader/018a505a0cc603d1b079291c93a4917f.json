{"ast":null,"code":"import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport '../Styling/UserManagement.css';\nexport const postLogin = createAsyncThunk('/login', async (_ref, thunkAPI) => {\n  let {\n    email,\n    password\n  } = _ref;\n\n  try {\n    const response = await fetch('/app/user/login', {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    let data = await response.json();\n\n    if (response.status === 200) {\n      localStorage.setItem('token', data.accessToken);\n      localStorage.setItem('userId', data.id);\n      return data;\n    } else {\n      return thunkAPI.rejectWithValue(data);\n    }\n  } catch (e) {\n    thunkAPI.rejectWithValue(e.response.data);\n  }\n});\nexport const postRegistration = createAsyncThunk('/register', async (data, thunkAPI) => {\n  try {\n    const response = await fetch('/app/user/register', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    });\n    let responseData = await response.json();\n\n    if (response.status === 200) {\n      localStorage.setItem('token', responseData.accessToken);\n      localStorage.setItem('userId', responseData.id);\n      return responseData;\n    } else {\n      return thunkAPI.rejectWithValue(responseData);\n    }\n  } catch (e) {\n    thunkAPI.rejectWithValue(e.response.data);\n  }\n});\nexport const getLoginInfo = createAsyncThunk('/info', async (_ref2, thunkAPI) => {\n  let {\n    token\n  } = _ref2;\n\n  try {\n    const response = await fetch('/app/user/info', {\n      method: 'GET',\n      headers: {\n        'Authorization': token\n      }\n    });\n    let responseData = await response.json();\n\n    if (response.status === 200) {\n      localStorage.setItem('userId', responseData.id);\n      return responseData;\n    } else {\n      return thunkAPI.rejectWithValue(responseData);\n    }\n  } catch (e) {\n    thunkAPI.rejectWithValue(e.response.data);\n  }\n});","map":{"version":3,"names":["createAsyncThunk","useSelector","useDispatch","postLogin","thunkAPI","email","password","response","fetch","method","headers","Accept","body","JSON","stringify","data","json","status","localStorage","setItem","accessToken","id","rejectWithValue","e","postRegistration","responseData","getLoginInfo","token"],"sources":["C:/Users/udayj/OneDrive/Desktop/Reacy/Movie_Ticket_Booking_SpringBoot_React-main/Online-Movie-Ticket-Booking-Website-master/frontend/src/UserManagement/PostMessage.js"],"sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit'\nimport { useSelector, useDispatch } from \"react-redux\"\nimport '../Styling/UserManagement.css'\n\nexport const postLogin = createAsyncThunk(\n    '/login',\n    async ({ email, password }, thunkAPI) => {\n        try {\n            const response = await fetch(\n                '/app/user/login',\n                {\n                    method: 'POST',\n                    headers: {\n                        Accept: 'application/json',\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify({\n                        email,\n                        password,\n                    }),\n                }\n            );\n            let data = await response.json();\n            if (response.status === 200) {\n                localStorage.setItem('token', data.accessToken);\n                localStorage.setItem('userId', data.id);\n                return data;\n            } else {\n                return thunkAPI.rejectWithValue(data);\n            }\n        } catch (e) {\n            thunkAPI.rejectWithValue(e.response.data);\n        }\n    }\n);\n\nexport const postRegistration = createAsyncThunk(\n    '/register',\n    async (data, thunkAPI) => {\n        try {\n            const response = await fetch('/app/user/register', {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(data)\n            })\n            let responseData = await response.json();\n            if (response.status === 200) {\n                localStorage.setItem('token', responseData.accessToken);\n                localStorage.setItem('userId', responseData.id);\n                return responseData;\n            } else {\n                return thunkAPI.rejectWithValue(responseData);\n            }\n        } catch (e) {\n            thunkAPI.rejectWithValue(e.response.data);\n        }\n    }\n);\n\nexport const getLoginInfo = createAsyncThunk(\n    '/info',\n    async ({ token }, thunkAPI) => {\n        try {\n            const response = await fetch('/app/user/info', {\n                method: 'GET',\n                headers: {\n                    'Authorization': token,\n                }\n            })\n            let responseData = await response.json();\n            if (response.status === 200) {\n                localStorage.setItem('userId', responseData.id);\n                return responseData;\n            } else {\n                return thunkAPI.rejectWithValue(responseData);\n            }\n        } catch (e) {\n            thunkAPI.rejectWithValue(e.response.data);\n        }\n    }\n);"],"mappings":"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"},"metadata":{},"sourceType":"module"}